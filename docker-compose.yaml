services:
  user_manager_db:
    image: postgres:13
    restart: always
    user: ${DB_USER}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 2s
      timeout: 1s
      retries: 5
    environment:
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASS
      - POSTGRES_DB=$DB_NAME

  user_manager_transfer_db:
    image: neo4j:4.2
    restart: always
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASS}
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_config:/config
      - neo4j_plugins:/plugins

  game_lobby_logs_db:
    image: mongo:4.4
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_ROOT_USER
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_ROOT_PASS
    volumes:
      - lobby_log:/data/db

  service-discovery:
    build: ./service-discovery
    ports:
      - "$SERVICE_DISCOVERY_PORT:$SERVICE_DISCOVERY_PORT"
    environment:
      - FLASK_RUN_PORT=$SERVICE_DISCOVERY_PORT
      - FLASK_RUN_HOST=0.0.0.0
      - PYTHONUNBUFFERED=1

  gateway:
    build: ./gateway
    ports:
      - "$GATEWAY_PORT:$GATEWAY_PORT"
    depends_on:
      - service-discovery
    environment:
      - SERVICE_DISCOVERY_HOST=service-discovery
      - SERVICE_DISCOVERY_PORT=$SERVICE_DISCOVERY_PORT
      - QUART_RUN_PORT=$GATEWAY_PORT
      - QUART_RUN_HOST=0.0.0.0
      - PYTHONUNBUFFERED=1
      - USER_JWT_SECRET=$USER_MANAGER_JWT_USER_SECRET

  user_manager:
    build: ./user_manager
    depends_on:
      - service-discovery
      - user_manager_db
      - user_manager_transfer_db
    environment:
      - SERVICE_DISCOVERY_HOST=service-discovery
      - SERVICE_DISCOVERY_PORT=$SERVICE_DISCOVERY_PORT
      - DB_HOST=user_manager_db
      - DB_PORT=$DB_PORT
      - DB_USER=$DB_USER
      - DB_PASS=$DB_PASS
      - DB_NAME=$DB_NAME
      - NEO4J_BOLT_PORT=$NEO4J_BOLT_PORT
      - NEO4J_BROWSER_PORT=$NEO4J_BROWSER_PORT
      - NEO4J_USER=$NEO4J_USER
      - NEO4J_PASS=$NEO4J_PASS
      - NEO4J_HOST=user_manager_transfer_db
      - NEO4J_DATABASE=$NEO4J_DATABASE
      - PORT=$USER_MANAGER_PORT
      - JWT_USER_SECRET=$USER_MANAGER_JWT_USER_SECRET
      - JWT_INTERNAL_SECRET=$JWT_INTERNAL_SECRET
    deploy:
      mode: replicated
      replicas: 3
      endpoint_mode: vip

  game_lobby:
    build: ./game_lobby
    depends_on:
      - service-discovery
    # depends_on:
    #   user_manager:
    #     condition: service_healthy
    environment:
      - SERVICE_DISCOVERY_HOST=service-discovery
      - SERVICE_DISCOVERY_PORT=$SERVICE_DISCOVERY_PORT
      - GAME_LOBBY_PORT=$GAME_LOBBY_PORT
      - JWT_INTERNAL_SECRET=$JWT_INTERNAL_SECRET
      - JWT_USER_SECRET=$USER_MANAGER_JWT_USER_SECRET
      - EXCHANGE_SERVICE_HOST=exchange-service
      - EXCHANGE_SERVICE_PORT=$EXCHANGE_SERVICE_PORT
      - MONGO_HOST=game_lobby_logs_db
      - MONGO_PORT=$MONGO_PORT
      - MONGO_DB_NAME=$MONGO_DB_NAME
      - MONGO_ROOT_USER=$MONGO_ROOT_USER
      - MONGO_ROOT_PASS=$MONGO_ROOT_PASS
    deploy:
      mode: replicated
      replicas: 3
      endpoint_mode: vip

  exchange-cache:
    build: ./exchange-cache
    environment:
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_RUN_PORT=$EXCHANGE_CACHE_PORT

  exchange-service:
    build: ./exchange-service
    depends_on:
      - service-discovery
      - exchange-cache
    environment:
      - SERVICE_DISCOVERY_HOST=service-discovery
      - SERVICE_DISCOVERY_PORT=$SERVICE_DISCOVERY_PORT
      - PORT=$EXCHANGE_SERVICE_PORT
      - EXCHANGE_CACHE_HOST=exchange-cache
      - EXCHANGE_CACHE_PORT=$EXCHANGE_CACHE_PORT
    deploy:
      mode: replicated
      replicas: 3
      endpoint_mode: vip

volumes:
  db_data:
  lobby_log:
  neo4j_data:
  neo4j_logs:
  neo4j_config:
  neo4j_plugins:
